{"version":3,"file":"static/chunks/7671.28333bb6976b9904.js","mappings":"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","sources":["webpack://_N_E/./app/components/forms/student-form.tsx","webpack://_N_E/./app/components/input-field.tsx"],"sourcesContent":["'use client';\nimport React from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport InputField from '../input-field';\nimport Image from 'next/image';\n\ntype FormInfoProps = {\n  type: 'create' | 'update';\n  data?: any;\n};\n\nconst schema = z.object({\n  username: z\n    .string()\n    .min(3, { message: 'Username must be at least 3 characters long' })\n    .max(20, { message: 'Username must be at most 20 characters long' }),\n  email: z.string().email({ message: 'Invalid email address' }),\n  password: z\n    .string()\n    .min(6, { message: 'Password must be at least 6 characters long' }),\n  firstName: z.string().min(1, { message: 'First name is required!' }),\n  lastName: z.string().min(1, { message: 'Last name is required' }),\n  phone: z.string().min(1, { message: 'Phone is required' }),\n  address: z.string().min(1, { message: 'Address is required' }),\n  bloodType: z.string().min(1, { message: 'Blood type is required' }),\n  birthday: z.date({ message: 'Birthday is required' }),\n  sex: z.enum(['male', 'female'], { message: 'Sex is required' }),\n  img: z.instanceof(File, { message: 'Image is required' }),\n});\n\ntype Inputs = z.infer<typeof schema>;\n\nconst Studentform = ({ type, data }: FormInfoProps) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<Inputs>({\n    resolver: zodResolver(schema),\n  });\n\n  const onSubmit = handleSubmit((data) => {\n    console.log(data);\n    // Handle form submission logic here\n    // For example, you can send the data to an API or perform any other action\n    // reset form after submission\n  });\n\n  return (\n    <form className=\"flex flex-col gap-8\" onSubmit={onSubmit}>\n      <h1 className=\"text-xl font-semibold\">Create a new student</h1>\n      <span className=\"text-xs text-gray-400 capitalize font-medium\">\n        Authentication Information\n      </span>\n      <div className=\"flex justify-between flex-wrap gap-4\">\n        <InputField\n          label=\"Username\"\n          type=\"text\"\n          register={register}\n          name=\"username\"\n          errors={errors.username}\n          defaultValue={data?.username}\n        />\n        <InputField\n          label=\"Email\"\n          type=\"email\"\n          register={register}\n          name=\"email\"\n          errors={errors.email}\n          defaultValue={data?.email}\n        />\n        <InputField\n          label=\"Password\"\n          type=\"password\"\n          register={register}\n          name=\"password\"\n          errors={errors.password}\n          defaultValue={data?.password}\n        />\n      </div>\n      <span className=\"text-xs text-gray-400 capitalize font-medium\">\n        Personal Information\n      </span>\n      <div className=\"flex justify-between flex-wrap gap-4\">\n        <InputField\n          label=\"First Name\"\n          type=\"text\"\n          register={register}\n          name=\"firstName\"\n          errors={errors.firstName}\n          defaultValue={data?.firstName}\n        />\n        <InputField\n          label=\"Last Name\"\n          type=\"text\"\n          register={register}\n          name=\"lastName\"\n          errors={errors.lastName}\n          defaultValue={data?.lastName}\n        />\n        <InputField\n          label=\"Phone\"\n          type=\"number\"\n          register={register}\n          name=\"phone\"\n          errors={errors.phone}\n          defaultValue={data?.phone}\n        />\n\n        <InputField\n          label=\"Address\"\n          type=\"text\"\n          register={register}\n          name=\"address\"\n          errors={errors.address}\n          defaultValue={data?.address}\n        />\n        <InputField\n          label=\"Blood Type\"\n          type=\"text\"\n          register={register}\n          name=\"bloodType\"\n          errors={errors.bloodType}\n          defaultValue={data?.bloodType}\n        />\n        <InputField\n          label=\"Birthday\"\n          type=\"date\"\n          register={register}\n          name=\"birthday\"\n          errors={errors.birthday}\n          defaultValue={data?.birthday}\n        />\n\n        <div className=\"flex flex-col gap-2 w-full md:w-1/4\">\n          <label htmlFor=\"sex\" className=\"text-xs text-gray-500\">\n            Sex\n          </label>\n          <select\n            id=\"sex\"\n            defaultValue={data?.sex}\n            {...register('sex')}\n            className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n          >\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n          </select>\n          {errors.sex?.message && (\n            <p className=\"text-red-500 text-xs\">\n              {errors.sex?.message.toString()}\n            </p>\n          )}\n        </div>\n        <div className=\"flex flex-col gap-2 w-full md:w-1/4 justify-center\">\n          <label\n            htmlFor=\"img\"\n            className=\"text-xs text-gray-500 flex items-center gap-2 cursor-pointer\"\n          >\n            <Image src=\"/upload.png\" alt=\"\" width={28} height={28} />\n            <span>Upload a photo</span>\n          </label>\n          <input id=\"img\" type=\"file\" {...register('img')} className=\"hidden\" />\n          {errors.img?.message && (\n            <p className=\"text-red-500 text-xs\">\n              {errors.img?.message.toString()}\n            </p>\n          )}\n        </div>\n      </div>\n      <button type=\"submit\" className=\"bg-blue-400 text-white p-2 rounded-md\">\n        {type === 'create' ? 'Create' : 'Update'}\n      </button>\n    </form>\n  );\n};\n\nexport default Studentform;\n","import React from 'react';\nimport { FieldError } from 'react-hook-form';\n\ntype InputFieldProps = {\n  label: string;\n  type?: string;\n  register: any;\n  name: string;\n  defaultValue?: string;\n  errors?: FieldError;\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;\n};\n\nconst InputField = ({\n  label,\n  type = 'text',\n  register,\n  name,\n  defaultValue,\n  errors,\n  inputProps,\n}: InputFieldProps) => {\n  return (\n    <div className=\"flex flex-col gap-2 w-full md:w-1/4\">\n      <label htmlFor={name} className=\"text-xs text-gray-500\">\n        {label}\n      </label>\n      <input\n        id={name}\n        type={type}\n        defaultValue={defaultValue}\n        {...inputProps}\n        {...register(name)}\n        className=\"ring-[1.5px] ring-gray-300 p-2 rounded-md text-sm w-full\"\n      />\n      {errors?.message && (\n        <p className=\"text-red-500 text-xs\">{errors?.message.toString()}</p>\n      )}\n    </div>\n  );\n};\n\nexport default InputField;\n"],"names":["schema","z","object","username","string","min","message","max","email","password","firstName","lastName","phone","address","bloodType","birthday","date","sex","enum","img","instanceof","File","errors","type","Studentform","data","register","handleSubmit","formState","useForm","resolver","zodResolver","onSubmit","console","log","form","className","h1","span","div","InputField","label","name","defaultValue","htmlFor","select","id","option","value","p","toString","Image","src","alt","width","height","input","button","inputProps"],"sourceRoot":"","ignoreList":[]}