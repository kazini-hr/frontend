{"version":3,"file":"static/chunks/642-9436f1bc658224d7.js","mappings":"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","sources":["webpack://_N_E/./lib/api.ts","webpack://_N_E/./lib/mock-data.ts","webpack://_N_E/./lib/api-hooks.ts","webpack://_N_E/./lib/utils.ts","webpack://_N_E/./components/ui/card.tsx"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\n\nconst BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'https://api.kazinihr.co.ke';\n\n// Create axios instance with default config\nconst api: AxiosInstance = axios.create({\n  baseURL: BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true, // Enable cookies for auth\n});\n\n// Request interceptor to add auth token (fallback for non-cookie auth)\napi.interceptors.request.use(\n  (config) => {\n    // For cookie-based auth, the browser automatically sends cookies\n    // This fallback is for localStorage token if needed\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // For cookie-based auth, clear any stored tokens and redirect\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;","import type {\n  OutsourcedDashboard,\n  EmployeeOutsourced,\n  BankCodesResponse,\n  PayrollOutsourcedConfiguration,\n  WalletBalance,\n  WalletTransactionHistory,\n  PayrollOutsourcedSummary,\n  OutsourcedWalletFundResponse\n} from './types';\n\n// Mock Dashboard Data\nexport const mockDashboard: OutsourcedDashboard = {\n  totalEmployees: 5,\n  activeEmployees: 4,\n  totalPayrollCycles: 2,\n  lastPayrollRun: '2024-01-30T10:00:00Z',\n  totalAmountDisbursed: 480000,\n  pendingDisbursements: 1\n};\n\n// Mock Employees Data\nexport const mockEmployees: EmployeeOutsourced[] = [\n  {\n    id: 'emp_001',\n    accountNumber: '1234567890',\n    amount: 85000,\n    bankCode: '01',\n    isActive: true,\n    createdAt: '2024-01-15T08:00:00Z',\n    updatedAt: '2024-01-15T08:00:00Z',\n    companyId: 'comp_001'\n  },\n  {\n    id: 'emp_002',\n    accountNumber: '2345678901',\n    amount: 120000,\n    bankCode: '03',\n    isActive: true,\n    createdAt: '2024-01-16T09:00:00Z',\n    updatedAt: '2024-01-16T09:00:00Z',\n    companyId: 'comp_001'\n  },\n  {\n    id: 'emp_003',\n    accountNumber: '3456789012',\n    amount: 95000,\n    bankCode: '11',\n    isActive: true,\n    createdAt: '2024-01-17T10:00:00Z',\n    updatedAt: '2024-01-17T10:00:00Z',\n    companyId: 'comp_001'\n  },\n  {\n    id: 'emp_004',\n    accountNumber: '4567890123',\n    amount: 75000,\n    bankCode: '01',\n    isActive: true,\n    createdAt: '2024-01-18T11:00:00Z',\n    updatedAt: '2024-01-18T11:00:00Z',\n    companyId: 'comp_001'\n  },\n  {\n    id: 'emp_005',\n    accountNumber: '5678901234',\n    amount: 65000,\n    bankCode: '07',\n    isActive: false,\n    createdAt: '2024-01-19T12:00:00Z',\n    updatedAt: '2024-01-25T14:00:00Z',\n    companyId: 'comp_001'\n  }\n];\n\n// Mock Bank Codes Data\nexport const mockBankCodes: BankCodesResponse = {\n  bankCodes: [\n    { code: '01', name: 'Kenya Commercial Bank', bank: 'KCB' },\n    { code: '03', name: 'Standard Chartered Bank', bank: 'SCB' },\n    { code: '07', name: 'Barclays Bank of Kenya', bank: 'Barclays' },\n    { code: '11', name: 'Equity Bank', bank: 'Equity' },\n    { code: '12', name: 'Cooperative Bank', bank: 'Co-op Bank' }\n  ],\n  csvFormat: {\n    headers: ['account_number', 'amount', 'bank_code'],\n    example: ['1234567890', '50000', '01'],\n    description: 'CSV file must have exactly 3 columns with the headers above'\n  }\n};\n\n// Mock Payroll Configuration\nexport const mockPayrollConfig: PayrollOutsourcedConfiguration = {\n  id: 'config_001',\n  payrollPeriod: 'MONTHLY',\n  startDate: '2024-01-01T00:00:00Z',\n  endDate: '2024-12-31T23:59:59Z',\n  dayOfPayment: 30,\n  isActive: true,\n  createdAt: '2024-01-01T08:00:00Z',\n  updatedAt: '2024-01-01T08:00:00Z',\n  companyId: 'comp_001',\n  walletId: 'wallet_001'\n};\n\n// Mock Wallet Balance\nexport const mockWalletBalance: WalletBalance = {\n  wallet_id: 'wallet_001',\n  balance: 150000,\n  currency: 'KES',\n  wallet_type: 'PAYROLL',\n  last_updated: '2024-01-30T15:30:00Z',\n  wallet: {\n  id: \"cmc3hb4yo0000sxx5joici81p\",\n  balance: 115,\n  currency: \"KES\",\n  narrative: \"Outsourced payroll disbursement wallet\",\n  subtype: \"OUTSOURCED_PAYROLL\",\n  createdAt: \"2025-06-19T14:31:09.792000+00:00\",\n  updatedAt: \"2025-06-20T14:00:56.057000+00:00\"\n},\n  exists: true,\n\n};\n\n// Mock Wallet Transactions\nexport const mockWalletTransactions: WalletTransactionHistory = {\n  transactions: [\n    {\n      id: 'txn_001',\n      transactionType: 'CREDIT',\n      amount: 500000,\n      reference: 'FUND_REF_001',\n      paymentStatus: 'COMPLETED',\n      createdAt: '2024-01-28T10:00:00Z'\n    },\n    {\n      id: 'txn_002',\n      transactionType: 'DEBIT',\n      amount: 350000,\n      reference: 'PAYROLL_JAN_2024',\n      paymentStatus: 'COMPLETED',\n      createdAt: '2024-01-30T14:00:00Z'\n    }\n  ],\n  total_count: 2,\n  limit: 20,\n  offset: 0\n};\n\n// Mock Payroll Summary\nexport const mockPayrollSummary: PayrollOutsourcedSummary = {\n  employeeCount: 4,\n  totalGrossPay: 375000, // Sum of active employees: 85000 + 120000 + 95000 + 75000\n  totalNetPay: 300000, // After 20% PAYE deduction\n  totalPayeTax: 75000, // 20% of gross pay\n  totalKaziniHRFees: 6000, // 2% of net pay\n  totalDisbursementAmount: 306000, // net pay + fees\n  breakdown: [\n    {\n      employeeId: 'emp_001',\n      accountNumber: '1234567890',\n      bankCode: '01',\n      grossPay: 85000,\n      payeTax: 17000,\n      netPay: 68000,\n      kazinihrFee: 1360\n    },\n    {\n      employeeId: 'emp_002',\n      accountNumber: '2345678901',\n      bankCode: '03',\n      grossPay: 120000,\n      payeTax: 24000,\n      netPay: 96000,\n      kazinihrFee: 1920\n    },\n    {\n      employeeId: 'emp_003',\n      accountNumber: '3456789012',\n      bankCode: '11',\n      grossPay: 95000,\n      payeTax: 19000,\n      netPay: 76000,\n      kazinihrFee: 1520\n    },\n    {\n      employeeId: 'emp_004',\n      accountNumber: '4567890123',\n      bankCode: '01',\n      grossPay: 75000,\n      payeTax: 15000,\n      netPay: 60000,\n      kazinihrFee: 1200\n    }\n  ],\n  kazinihrAccount: {\n    bankName: 'Kenya Commercial Bank',\n    accountNumber: '9876543210',\n    accountName: 'KaziniHR Limited',\n    bankCode: '01'\n  }\n};\n\n// Mock Fund Wallet Response\nexport const mockFundResponse: OutsourcedWalletFundResponse = {\n  payment_id: 'pay_001',\n  payment_method: 'bank_transfer',\n  amount: 100000,\n  reference: 'FUND_REF_002',\n  status: 'pending',\n  payment_instructions: {\n    method: 'bank_transfer',\n    bank_name: 'Kenya Commercial Bank',\n    account_number: '1111222233',\n    account_name: 'KaziniHR Collections',\n    reference: 'FUND_REF_002',\n    amount: 100000,\n    note: 'Use the reference number for easy identification'\n  },\n  message: 'Payment instructions generated successfully'\n};\n\n// Mock Payroll Cycles for Reports\nexport const mockPayrollCycles = [\n  {\n    id: 'cycle_001',\n    cycleCount: 1,\n    runDate: '2024-01-30',\n    employeeCount: 4,\n    totalGrossPay: 375000,\n    totalNetPay: 300000,\n    totalPayeTax: 75000,\n    totalKaziniHRFees: 6000,\n    totalDisbursementAmount: 306000,\n    hasRun: true,\n    completed: true,\n    status: 'COMPLETED'\n  },\n  {\n    id: 'cycle_002',\n    cycleCount: 2,\n    runDate: '2024-02-29',\n    employeeCount: 4,\n    totalGrossPay: 375000,\n    totalNetPay: 300000,\n    totalPayeTax: 75000,\n    totalKaziniHRFees: 6000,\n    totalDisbursementAmount: 306000,\n    hasRun: true,\n    completed: false,\n    status: 'PROCESSED'\n  }\n];\n\n// Utility functions for mock API responses\nexport const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const mockApiResponse = async <T>(data: T, delayMs = 500): Promise<T> => {\n  await delay(delayMs);\n  return data;\n};\n\n// Mock API error responses\nexport const mockApiError = (message: string, status = 400) => {\n  const error = new Error(message) as any;\n  error.response = {\n    status,\n    data: { detail: message }\n  };\n  throw error;\n};","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport api from './api';\nimport {\n  mockDashboard,\n  mockEmployees,\n  mockBankCodes,\n  mockPayrollConfig,\n  mockWalletBalance,\n  mockWalletTransactions,\n  mockPayrollSummary,\n  mockFundResponse,\n  mockPayrollCycles,\n  mockApiResponse,\n  mockApiError,\n  delay\n} from './mock-data';\nimport type {\n  OutsourcedDashboard,\n  EmployeeOutsourced,\n  BankCodesResponse,\n  PayrollOutsourcedConfiguration,\n  WalletBalance,\n  WalletTransactionHistory,\n  PayrollOutsourcedSummary,\n  OutsourcedWalletFundRequest,\n  OutsourcedWalletFundResponse,\n  RegisterCompanyRequest,\n  RegisterCompanyResponse,\n  LoginRequest,\n  LoginResponse,\n  Setup2FARequest,\n  Setup2FAResponse,\n  Verify2FARequest,\n  Verify2FAResponse\n} from './types';\n\n// Environment flag to toggle between mock and real API\nconst USE_MOCK_DATA = process.env.NEXT_PUBLIC_USE_MOCK === 'true';\n\n// Mock storage for dynamic data\nlet mockEmployeeData = [...mockEmployees];\nlet mockDashboardData = { ...mockDashboard };\nlet mockWalletData = { ...mockWalletBalance };\nlet mockConfigData = mockPayrollConfig;\n\n// API Functions\nconst registerCompany = async (data: RegisterCompanyRequest): Promise<RegisterCompanyResponse> => {\n  const response = await api.post('/api/companies/register', data);\n  return response.data;\n};\n\nconst login = async (data: LoginRequest): Promise<LoginResponse> => {\n  const response = await api.post('/api/auth/login', data);\n  return response.data;\n};\n\nconst setup2FA = async (data: Setup2FARequest): Promise<Setup2FAResponse> => {\n  const response = await api.post('/api/auth/2fa/setup', data);\n  return response.data;\n};\n\nconst verify2FA = async (data: Verify2FARequest): Promise<Verify2FAResponse> => {\n  const response = await api.post('/api/auth/2fa/setup/verify', data);\n  return response.data;\n};\n\nconst logout = async (): Promise<void> => {\n  await api.post('/api/auth/logout');\n};\n\n// Authentication hooks\nexport const useRegisterCompany = () => {\n  return useMutation<RegisterCompanyResponse, Error, RegisterCompanyRequest>({\n    mutationFn: registerCompany,\n  });\n};\n\nexport const useLogin = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation<LoginResponse, Error, LoginRequest>({\n    mutationFn: login,\n    onSuccess: (data) => {\n      if (data.session_token) {\n        // Store session info if needed (though cookies should handle this)\n        queryClient.setQueryData(['auth', 'user'], data.user);\n        \n        // Invalidate the auth query to force a refresh of auth state\n        queryClient.invalidateQueries({ queryKey: ['auth'] });\n      }\n    },\n  });\n};\n\nexport const useSetup2FA = () => {\n  return useMutation<Setup2FAResponse, Error, Setup2FARequest>({\n    mutationFn: setup2FA,\n  });\n};\n\nexport const useVerify2FA = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation<Verify2FAResponse, Error, Verify2FARequest>({\n    mutationFn: verify2FA,\n    onSuccess: (data) => {\n      if (data.setup_complete) {\n        queryClient.invalidateQueries({ queryKey: ['auth'] });\n      }\n    },\n  });\n};\n\nexport const useLogout = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation<void, Error, void>({\n    mutationFn: logout,\n    onSuccess: () => {\n      queryClient.clear();\n      // Redirect will be handled by axios interceptor\n    },\n  });\n};\n\n// Utility function to handle authentication errors\nexport const handleAuthError = (error: any): string => {\n  if (error.response?.data?.detail) {\n    const detail = error.response.data.detail;\n    if (typeof detail === 'string') {\n      return detail;\n    } else if (detail.message) {\n      return detail.message;\n    }\n  }\n  return error.message || 'An authentication error occurred';\n};\n\n// Dashboard hooks\nexport const useOutsourcedDashboard = () => {\n  return useQuery<OutsourcedDashboard>({\n    queryKey: ['outsourced', 'dashboard'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        // Update dashboard based on current employee data\n        const activeEmployees = mockEmployeeData.filter(emp => emp.isActive);\n        mockDashboardData.totalEmployees = mockEmployeeData.length;\n        mockDashboardData.activeEmployees = activeEmployees.length;\n        return mockApiResponse(mockDashboardData);\n      }\n      return api.get('/api/outsourced/dashboard').then(res => res.data).then(data => { console.log(data); return data; });\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n};\n\n// Employee hooks\nexport const useOutsourcedEmployees = (includeInactive = false) => {\n  return useQuery<EmployeeOutsourced[]>({\n    queryKey: ['outsourced', 'employees', includeInactive],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        let employees = [...mockEmployeeData];\n        if (!includeInactive) {\n          employees = employees.filter(emp => emp.isActive);\n        }\n        return mockApiResponse(employees);\n      }\n      return api.get(`/api/outsourced/employees?include_inactive=${includeInactive}`).then(res => res.data);\n    },\n  });\n};\n\nexport const useBankCodes = () => {\n  return useQuery<BankCodesResponse>({\n    queryKey: ['outsourced', 'bank-codes'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockApiResponse(mockBankCodes);\n      }\n      return api.get('/api/outsourced/bank-codes').then(res => res.data);\n    },\n    staleTime: 60 * 60 * 1000, // 1 hour\n  });\n};\n\nexport const useCreateEmployee = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data: Pick<EmployeeOutsourced, 'accountNumber' | 'amount' | 'bankCode'>) => {\n      if (USE_MOCK_DATA) {\n        await delay(1000); // Simulate API delay\n        \n        // Check for duplicate account numbers\n        const exists = mockEmployeeData.find(emp => emp.accountNumber === data.accountNumber);\n        if (exists) {\n          mockApiError('Account number already exists');\n        }\n        \n        // Validate bank code\n        const validBankCode = mockBankCodes.bankCodes.find(bank => bank.code === data.bankCode);\n        if (!validBankCode) {\n          mockApiError('Invalid bank code');\n        }\n        \n        const newEmployee: EmployeeOutsourced = {\n          id: `emp_${Date.now()}`,\n          accountNumber: data.accountNumber,\n          amount: data.amount,\n          bankCode: data.bankCode,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          companyId: 'comp_001'\n        };\n        \n        mockEmployeeData.push(newEmployee);\n        return mockApiResponse(newEmployee);\n      }\n      \n      return api.post('/api/outsourced/employees', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'employees'] });\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'dashboard'] });\n    },\n  });\n};\n\nexport const useUpdateEmployee = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async ({ id, ...data }: Partial<EmployeeOutsourced> & { id: string }) => {\n      if (USE_MOCK_DATA) {\n        await delay(800);\n        \n        const employeeIndex = mockEmployeeData.findIndex(emp => emp.id === id);\n        if (employeeIndex === -1) {\n          mockApiError('Employee not found', 404);\n        }\n        \n        // Check for duplicate account numbers (excluding current employee)\n        if (data.accountNumber) {\n          const exists = mockEmployeeData.find(emp => emp.accountNumber === data.accountNumber && emp.id !== id);\n          if (exists) {\n            mockApiError('Account number already exists');\n          }\n        }\n        \n        mockEmployeeData[employeeIndex] = {\n          ...mockEmployeeData[employeeIndex],\n          ...data,\n          updatedAt: new Date().toISOString()\n        };\n        \n        return mockApiResponse(mockEmployeeData[employeeIndex]);\n      }\n      \n      return api.put(`/api/outsourced/employees/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'employees'] });\n    },\n  });\n};\n\nexport const useDeleteEmployee = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (id: string) => {\n      if (USE_MOCK_DATA) {\n        await delay(600);\n        \n        const employeeIndex = mockEmployeeData.findIndex(emp => emp.id === id);\n        if (employeeIndex === -1) {\n          mockApiError('Employee not found', 404);\n        }\n        \n        mockEmployeeData.splice(employeeIndex, 1);\n        return mockApiResponse({ success: true });\n      }\n      \n      return api.delete(`/api/outsourced/employees/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'employees'] });\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'dashboard'] });\n    },\n  });\n};\n\nexport const useBulkUploadEmployees = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (file: File) => {\n      if (USE_MOCK_DATA) {\n        await delay(2000); // Simulate file processing time\n        \n        // Read and parse CSV file\n        const text = await file.text();\n        const lines = text.split('\\n').filter(line => line.trim());\n        \n        if (lines.length < 2) {\n          mockApiError('CSV file must contain at least one data row');\n        }\n        \n        const header = lines[0].toLowerCase();\n        if (!header.includes('account_number') || !header.includes('amount') || !header.includes('bank_code')) {\n          mockApiError('CSV must have columns: account_number, amount, bank_code');\n        }\n        \n        const errors: string[] = [];\n        const newEmployees: EmployeeOutsourced[] = [];\n        \n        for (let i = 1; i < lines.length; i++) {\n          const line = lines[i];\n          const values = line.split(',').map(v => v.trim());\n          \n          if (values.length !== 3) {\n            errors.push(`Row ${i + 1}: Must have exactly 3 columns`);\n            continue;\n          }\n          \n          const [accountNumber, amountStr, bankCode] = values;\n          const amount = parseInt(amountStr);\n          \n          // Validations\n          if (!accountNumber || accountNumber.length < 8) {\n            errors.push(`Row ${i + 1}: Invalid account number`);\n            continue;\n          }\n          \n          if (isNaN(amount) || amount <= 0) {\n            errors.push(`Row ${i + 1}: Invalid amount`);\n            continue;\n          }\n          \n          const validBankCode = mockBankCodes.bankCodes.find(bank => bank.code === bankCode);\n          if (!validBankCode) {\n            errors.push(`Row ${i + 1}: Invalid bank code ${bankCode}`);\n            continue;\n          }\n          \n          // Check for duplicates in existing data\n          const exists = mockEmployeeData.find(emp => emp.accountNumber === accountNumber);\n          if (exists) {\n            errors.push(`Row ${i + 1}: Account number ${accountNumber} already exists`);\n            continue;\n          }\n          \n          // Check for duplicates within the upload\n          const duplicate = newEmployees.find(emp => emp.accountNumber === accountNumber);\n          if (duplicate) {\n            errors.push(`Row ${i + 1}: Duplicate account number ${accountNumber} in upload`);\n            continue;\n          }\n          \n          newEmployees.push({\n            id: `emp_${Date.now()}_${i}`,\n            accountNumber,\n            amount,\n            bankCode,\n            isActive: true,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            companyId: 'comp_001'\n          });\n        }\n        \n        if (errors.length > 0) {\n          const error = new Error('Upload validation failed') as any;\n          error.response = {\n            status: 400,\n            data: { detail: { message: 'Upload validation failed', errors } }\n          };\n          throw error;\n        }\n        \n        // Add new employees to mock data\n        mockEmployeeData.push(...newEmployees);\n        \n        return mockApiResponse({ \n          message: `Successfully uploaded ${newEmployees.length} employees`,\n          count: newEmployees.length \n        });\n      }\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      return api.post('/api/outsourced/employees/upload', formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'employees'] });\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'dashboard'] });\n    },\n  });\n};\n\n// Payroll Configuration hooks\nexport const usePayrollConfig = () => {\n  return useQuery<PayrollOutsourcedConfiguration>({\n    queryKey: ['outsourced', 'payroll', 'config'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockConfigData ? mockApiResponse(mockConfigData) : mockApiError('No configuration found', 404);\n      }\n      return api.get('/api/outsourced/payroll/config').then(res => res.data);\n    },\n  });\n};\n\nexport const useCreatePayrollConfig = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data: Omit<PayrollOutsourcedConfiguration, 'id' | 'createdAt' | 'updatedAt' | 'companyId'>) => {\n      if (USE_MOCK_DATA) {\n        await delay(1000);\n        \n        mockConfigData = {\n          id: `config_${Date.now()}`,\n          ...data,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          companyId: 'comp_001'\n        };\n        \n        return mockApiResponse(mockConfigData);\n      }\n      \n      return api.post('/api/outsourced/payroll/config', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'payroll', 'config'] });\n    },\n  });\n};\n\n// Wallet hooks\n\n// create useWallet hook if it exists we will be able to get a response, if it does not we will use a post request to create one\nexport const useWallet = () => {\n  return useQuery<WalletBalance>({\n    queryKey: ['outsourced', 'wallet'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockApiResponse(mockWalletData);\n      }\n      return api.get('/api/outsourced/wallet').then(res => res.data);\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\n// create wallet hook using useQuery\nexport const useCreateWallet = () => {\n  const queryClient = useQueryClient();\n  return useMutation<WalletBalance, Error>({\n    mutationFn: async () => {\n      if (USE_MOCK_DATA) {\n        await delay(1000); // Simulate API delay\n        // Check if wallet already exists\n        if (mockWalletData) {\n          mockApiError('Wallet already exists');\n        }\n        // Create a new wallet\n        mockWalletData = {\n          wallet_id: `wallet_${Date.now()}`,\n          balance: 0,\n          currency: 'KES',\n          wallet_type: 'MPESA',\n          last_updated: new Date().toISOString(),\n          wallet: null,\n          exists: true,\n        };\n        return mockApiResponse(mockWalletData);\n      }\n      return api.post('/api/outsourced/wallet').then(res => res.data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'wallet'] });\n    },\n  });\n};\n\nexport const useWalletBalance = () => {\n  return useQuery<WalletBalance>({\n    queryKey: ['outsourced', 'wallet', 'balance'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockApiResponse(mockWalletData);\n      }\n      return api.get('/api/outsourced/wallet/balance').then(res => res.data);\n    },\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n};\n\nexport const useWalletTransactions = (limit = 20, offset = 0) => {\n  return useQuery<WalletTransactionHistory>({\n    queryKey: ['outsourced', 'wallet', 'transactions', limit, offset],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockApiResponse(mockWalletTransactions);\n      }\n      return api.get(`/api/outsourced/wallet/transactions?limit=${limit}&offset=${offset}`).then(res => res.data);\n    },\n  });\n};\n\nexport const useFundWallet = () => {\n  const queryClient = useQueryClient();\n  return useMutation<OutsourcedWalletFundResponse, Error, OutsourcedWalletFundRequest>({\n    mutationFn: async (data) => {\n      if (USE_MOCK_DATA) {\n        await delay(1500);\n        \n        if (data.amount <= 0) {\n          mockApiError('Amount must be greater than 0');\n        }\n        \n        if (data.payment_method === 'mpesa' && !data.customer_phone) {\n          mockApiError('Phone number is required for M-PESA payments');\n        }\n        \n        const response: OutsourcedWalletFundResponse = {\n          ...mockFundResponse,\n          amount: data.amount,\n          reference: `FUND_REF_${Date.now()}`,\n          payment_method: data.payment_method,\n          payment_instructions: {\n            ...mockFundResponse.payment_instructions,\n            amount: data.amount,\n            reference: `FUND_REF_${Date.now()}`,\n            method: data.payment_method\n          }\n        };\n        \n        if (data.payment_method === 'mpesa') {\n          response.payment_instructions = {\n            method: 'mpesa',\n            reference: response.reference,\n            amount: data.amount,\n            note: 'Check your phone for M-PESA prompt'\n          };\n        }\n        \n        return mockApiResponse(response);\n      }\n      \n      return api.post('/api/outsourced/wallet/fund', data).then(res => res.data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'wallet'] });\n    },\n  });\n};\n\nexport const useConfirmBankTransfer = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data: {\n      reference: string;\n      bank_transaction_reference: string;\n      amount: number;\n      payment_date?: string;\n    }) => {\n      if (USE_MOCK_DATA) {\n        await delay(1200);\n        \n        if (!data.reference || !data.bank_transaction_reference) {\n          mockApiError('Reference and bank transaction reference are required');\n        }\n        \n        return mockApiResponse({\n          message: 'Transfer confirmation received. Pending admin approval.',\n          status: 'pending_approval',\n          reference: data.reference\n        });\n      }\n      \n      return api.post('/api/outsourced/wallet/confirm-bank-transfer', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'wallet'] });\n    },\n  });\n};\n\nexport const useApproveBankTransfer = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data: { reference: string }) => {\n      if (USE_MOCK_DATA) {\n        await delay(1000);\n        \n        if (!data.reference) {\n          mockApiError('Reference is required');\n        }\n        \n        // Simulate successful approval\n        mockWalletData.balance += 50000; // Assume fixed amount for mock\n        mockWalletData.last_updated = new Date().toISOString();\n        \n        return mockApiResponse({\n          message: 'Bank transfer approved and wallet credited successfully',\n          wallet_balance: mockWalletData.balance,\n          reference: data.reference\n        });\n      }\n      \n      return api.post('/api/outsourced/wallet/approve-bank-transfer', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'wallet'] });\n    },\n})\n    \n};\n\nexport const useVerifyMpesaTransaction = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data: {\n      mpesa_transaction_code: string;\n      amount?: number;\n    }) => {\n      if (USE_MOCK_DATA) {\n        await delay(2000); // Simulate M-PESA verification time\n        \n        if (!data.mpesa_transaction_code || data.mpesa_transaction_code.length !== 10) {\n          mockApiError('Invalid M-PESA transaction code');\n        }\n        \n        // Simulate successful verification\n        const creditAmount = data.amount || 50000;\n        mockWalletData.balance += creditAmount;\n        mockWalletData.last_updated = new Date().toISOString();\n        \n        return mockApiResponse({\n          success: true,\n          transaction_code: data.mpesa_transaction_code,\n          amount: creditAmount,\n          wallet_balance: mockWalletData.balance,\n          message: 'Transaction verified and wallet credited successfully',\n          transaction_id: `txn_${Date.now()}`\n        });\n      }\n      \n      return api.post('/api/outsourced/wallet/verify-transaction', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'wallet'] });\n    },\n  });\n};\n\n// Payroll Summary hooks\nexport const usePayrollSummary = () => {\n  return useQuery<PayrollOutsourcedSummary>({\n    queryKey: ['outsourced', 'payroll', 'summary'],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        // Calculate summary based on current active employees\n        const activeEmployees = mockEmployeeData.filter(emp => emp.isActive);\n        \n        if (activeEmployees.length === 0) {\n          return mockApiResponse({\n            employeeCount: 0,\n            totalGrossPay: 0,\n            totalNetPay: 0,\n            totalPayeTax: 0,\n            totalKaziniHRFees: 0,\n            totalDisbursementAmount: 0,\n            breakdown: [],\n            kazinihrAccount: mockPayrollSummary.kazinihrAccount\n          });\n        }\n        \n        const breakdown = activeEmployees.map(emp => {\n          const grossPay = emp.amount;\n          const payeTax = Math.round(grossPay * 0.2); // 20% PAYE\n          const netPay = grossPay - payeTax;\n          const kazinihrFee = Math.round(netPay * 0.02); // 2% fee\n          \n          return {\n            employeeId: emp.id,\n            accountNumber: emp.accountNumber,\n            bankCode: emp.bankCode,\n            grossPay,\n            payeTax,\n            netPay,\n            kazinihrFee\n          };\n        });\n        \n        const totals = breakdown.reduce((acc, emp) => ({\n          totalGrossPay: acc.totalGrossPay + emp.grossPay,\n          totalNetPay: acc.totalNetPay + emp.netPay,\n          totalPayeTax: acc.totalPayeTax + emp.payeTax,\n          totalKaziniHRFees: acc.totalKaziniHRFees + emp.kazinihrFee\n        }), { totalGrossPay: 0, totalNetPay: 0, totalPayeTax: 0, totalKaziniHRFees: 0 });\n        \n        const summary: PayrollOutsourcedSummary = {\n          employeeCount: activeEmployees.length,\n          ...totals,\n          totalDisbursementAmount: totals.totalNetPay + totals.totalKaziniHRFees,\n          breakdown,\n          kazinihrAccount: mockPayrollSummary.kazinihrAccount\n        };\n        \n        return mockApiResponse(summary);\n      }\n      \n      return api.get('/api/outsourced/payroll/summary').then(res => res.data);\n    },\n  });\n};\n\nexport const useProcessPayroll = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (data?: { run_date?: string }) => {\n      if (USE_MOCK_DATA) {\n        await delay(3000); // Simulate processing time\n        \n        const activeEmployees = mockEmployeeData.filter(emp => emp.isActive);\n        if (activeEmployees.length === 0) {\n          mockApiError('No active employees to process payroll for');\n        }\n        \n        // Simulate successful processing\n        const newCycle = {\n          id: `cycle_${Date.now()}`,\n          cycleCount: mockPayrollCycles.length + 1,\n          runDate: data?.run_date || new Date().toISOString().split('T')[0],\n          employeeCount: activeEmployees.length,\n          hasRun: true,\n          completed: false,\n          status: 'PROCESSED'\n        };\n        \n        mockPayrollCycles.push(newCycle as any);\n        \n        return mockApiResponse({\n          message: 'Payroll processed successfully',\n          cycle: newCycle,\n          records: activeEmployees.length\n        });\n      }\n      \n      return api.post('/api/outsourced/payroll/process', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'dashboard'] });\n    },\n  });\n};\n\n// Reports hooks (using mock data from reports page)\nexport const usePayrollCycles = (limit = 10) => {\n  return useQuery({\n    queryKey: ['outsourced', 'payroll', 'cycles', limit],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        return mockApiResponse(mockPayrollCycles.slice(0, limit));\n      }\n      return api.get(`/api/outsourced/payroll/reports?limit=${limit}`).then(res => res.data);\n    },\n  });\n};\n\nexport const usePayrollCycleReport = (cycleId: string) => {\n  return useQuery({\n    queryKey: ['outsourced', 'payroll', 'reports', cycleId],\n    queryFn: async () => {\n      if (USE_MOCK_DATA) {\n        const cycle = mockPayrollCycles.find(c => c.id === cycleId);\n        if (!cycle) {\n          mockApiError('Payroll cycle not found', 404);\n        }\n        return mockApiResponse(cycle);\n      }\n      return api.get(`/api/outsourced/payroll/reports/${cycleId}`).then(res => res.data);\n    },\n    enabled: !!cycleId,\n  });\n};\n\n// create hook for useDisbursePayroll using this endpoint /api/outsourced/payroll/disburse/{cycle_id}\nexport const useDisbursePayroll = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: async (cycleId: string) => {\n      if (USE_MOCK_DATA) {\n        await delay(2000); // Simulate disbursement time\n        \n        const cycle = mockPayrollCycles.find(c => c.id === cycleId);\n        if (!cycle) {\n          mockApiError('Payroll cycle not found', 404);\n        } else {\n          // Simulate successful disbursement\n          cycle.completed = true;\n          cycle.status = 'DISBURSED';\n        }\n        \n        return mockApiResponse({\n          message: 'Payroll disbursed successfully',\n          cycle\n        });\n      }\n      \n      return api.post(`/api/outsourced/payroll/disburse/${cycleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['outsourced', 'dashboard'] });\n    },\n  });\n};\n\n// Utils for error handling (keep existing)\nexport const handleApiError = (error: any): string => {\n  if (error.response?.data?.detail) {\n    const detail = error.response.data.detail;\n    if (typeof detail === 'string') {\n      return detail;\n    } else if (detail.errors && Array.isArray(detail.errors)) {\n      return detail.errors.join(', ');\n    } else if (detail.message) {\n      return detail.message;\n    }\n  }\n  return error.message || 'An unexpected error occurred';\n};","import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":["api","axios","create","baseURL","process","BASE_URL","timeout","headers","withCredentials","interceptors","request","use","token","localStorage","getItem","config","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","delay","mockBankCodes","resolve","setTimeout","ms","mockApiResponse","data","delayMs","post","login","useRegisterCompany","useMutation","mutationFn","registerCompany","useLogin","queryClient","useQueryClient","onSuccess","session_token","setQueryData","user","invalidateQueries","queryKey","detail","message","useQuery","queryFn","get","then","res","console","log","staleTime","useOutsourcedEmployees","includeInactive","useBankCodes","useCreateEmployee","id","put","delete","file","formData","FormData","append","useCreatePayrollConfig","useCreateWallet","refetchInterval","useWalletTransactions","limit","offset","useProcessPayroll","cycleId","enabled","useDisbursePayroll","errors","Array","isArray","join","cn","inputs","twMerge","clsx","Card","React","ref","className","props","div","displayName","CardHeader","CardTitle","CardDescription","CardContent"],"sourceRoot":"","ignoreList":[]}