"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  User,
  Building,
  DollarSign,
  FileText,
  CheckCircle,
  ArrowLeft,
  Upload,
  Calendar,
  Mail,
  Phone,
  MapPin,
} from "lucide-react";
import { useEmployeeStore } from "@/store/employees";
import type { Employee } from "@/types/employee";

const departments = [
  "Engineering",
  "Sales",
  "Marketing",
  "Human Resources",
  "Finance",
  "Operations",
  "Customer Support",
  "Legal",
];

const positions = {
  Engineering: [
    "Software Engineer",
    "Senior Developer",
    "DevOps Engineer",
    "QA Engineer",
    "Engineering Manager",
  ],
  Sales: [
    "Sales Representative",
    "Account Manager",
    "Sales Manager",
    "Business Development",
  ],
  Marketing: [
    "Marketing Specialist",
    "Content Creator",
    "Marketing Manager",
    "SEO Specialist",
  ],
  "Human Resources": [
    "HR Specialist",
    "Recruiter",
    "HR Manager",
    "Training Coordinator",
  ],
  Finance: ["Accountant", "Financial Analyst", "Finance Manager", "Auditor"],
  Operations: [
    "Operations Specialist",
    "Operations Manager",
    "Process Analyst",
  ],
  "Customer Support": ["Support Agent", "Technical Support", "Support Manager"],
  Legal: ["Legal Counsel", "Paralegal", "Legal Manager"],
};

export default function EmployeeOnboardingPage() {
  const router = useRouter();
  const { addEmployee, isLoading } = useEmployeeStore();

  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Personal Information
    name: "",
    email: "",
    phone: "",
    dateOfBirth: "",
    address: "",
    emergencyContact: "",
    emergencyPhone: "",

    // Employment Details
    department: "",
    position: "",
    hireDate: "",
    employmentType: "full-time",
    workLocation: "office",
    reportingManager: "",

    // Compensation
    salary: "",
    currency: "KES",
    paymentFrequency: "monthly",
    benefits: [] as string[],

    // Documents
    documents: [] as File[],

    // Additional Info
    notes: "",
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  const totalSteps = 4;
  const progress = (currentStep / totalSteps) * 100;

  const handleInputChange = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  const validateStep = (step: number): boolean => {
    const newErrors: Record<string, string> = {};

    switch (step) {
      case 1:
        if (!formData.name.trim()) newErrors.name = "Name is required";
        if (!formData.email.trim()) newErrors.email = "Email is required";
        if (!formData.phone.trim()) newErrors.phone = "Phone is required";
        break;
      case 2:
        if (!formData.department)
          newErrors.department = "Department is required";
        if (!formData.position) newErrors.position = "Position is required";
        if (!formData.hireDate) newErrors.hireDate = "Hire date is required";
        break;
      case 3:
        if (!formData.salary) newErrors.salary = "Salary is required";
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep((prev) => Math.min(prev + 1, totalSteps));
    }
  };

  const prevStep = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) return;

    const employeeData: Omit<Employee, "id"> = {
      employeeId: "", // Will be generated by the store
      name: formData.name,
      email: formData.email,
      department: formData.department,
      position: formData.position,
      status: "active",
      hireDate: formData.hireDate,
      phone: formData.phone,
      salary: parseFloat(formData.salary) || undefined,
    };

    try {
      await addEmployee(employeeData);
      router.push("/employees?success=Employee added successfully");
    } catch (error) {
      console.error("Failed to add employee:", error);
    }
  };

  const availablePositions = formData.department
    ? positions[formData.department as keyof typeof positions] || []
    : [];

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <Button outline className="h-5 w-5" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            Employee Onboarding
          </h1>
          <p className="text-muted-foreground">
            Add a new team member to your organization
          </p>
        </div>
      </div>

      {/* Progress */}
      <Card>
        <CardContent className="pt-6">
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>
                Step {currentStep} of {totalSteps}
              </span>
              <span>{Math.round(progress)}% Complete</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        </CardContent>
      </Card>

      {/* Form Steps */}
      <Card>
        <CardContent className="pt-6">
          <Tabs value={currentStep.toString()} className="w-full">
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="1" disabled={currentStep < 1}>
                <User className="mr-2 h-4 w-4" />
                Personal
              </TabsTrigger>
              <TabsTrigger value="2" disabled={currentStep < 2}>
                <Building className="mr-2 h-4 w-4" />
                Employment
              </TabsTrigger>
              <TabsTrigger value="3" disabled={currentStep < 3}>
                <DollarSign className="mr-2 h-4 w-4" />
                Compensation
              </TabsTrigger>
              <TabsTrigger value="4" disabled={currentStep < 4}>
                <FileText className="mr-2 h-4 w-4" />
                Review
              </TabsTrigger>
            </TabsList>

            {/* Step 1: Personal Information */}
            <TabsContent value="1" className="space-y-6 mt-6">
              <div>
                <h3 className="text-lg font-medium mb-4">
                  Personal Information
                </h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="name">Full Name *</Label>
                    <Input
                      id="name"
                      value={formData.name}
                      onChange={(e) =>
                        handleInputChange("name", e.target.value)
                      }
                      placeholder="Enter full name"
                      //   error={!!errors.name}
                    />
                    {errors.name && (
                      <p className="text-sm text-red-600">{errors.name}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address *</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) =>
                        handleInputChange("email", e.target.value)
                      }
                      placeholder="Enter email address"
                      //   error={!!errors.email}
                    />
                    {errors.email && (
                      <p className="text-sm text-red-600">{errors.email}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone Number *</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) =>
                        handleInputChange("phone", e.target.value)
                      }
                      placeholder="+254712345678"
                      //   error={!!errors.phone}
                    />
                    {errors.phone && (
                      <p className="text-sm text-red-600">{errors.phone}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="dateOfBirth">Date of Birth</Label>
                    <Input
                      id="dateOfBirth"
                      type="date"
                      value={formData.dateOfBirth}
                      onChange={(e) =>
                        handleInputChange("dateOfBirth", e.target.value)
                      }
                    />
                  </div>

                  <div className="space-y-2 md:col-span-2">
                    <Label htmlFor="address">Address</Label>
                    <Textarea
                      id="address"
                      value={formData.address}
                      onChange={(e) =>
                        handleInputChange("address", e.target.value)
                      }
                      placeholder="Enter residential address"
                      rows={3}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="emergencyContact">
                      Emergency Contact Name
                    </Label>
                    <Input
                      id="emergencyContact"
                      value={formData.emergencyContact}
                      onChange={(e) =>
                        handleInputChange("emergencyContact", e.target.value)
                      }
                      placeholder="Emergency contact name"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="emergencyPhone">
                      Emergency Contact Phone
                    </Label>
                    <Input
                      id="emergencyPhone"
                      value={formData.emergencyPhone}
                      onChange={(e) =>
                        handleInputChange("emergencyPhone", e.target.value)
                      }
                      placeholder="+254712345678"
                    />
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Step 2: Employment Details */}
            <TabsContent value="2" className="space-y-6 mt-6">
              <div>
                <h3 className="text-lg font-medium mb-4">Employment Details</h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="department">Department *</Label>
                    <Select
                      value={formData.department}
                      onValueChange={(value) => {
                        handleInputChange("department", value);
                        handleInputChange("position", ""); // Reset position when department changes
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select department" />
                      </SelectTrigger>
                      <SelectContent>
                        {departments.map((dept) => (
                          <SelectItem key={dept} value={dept}>
                            {dept}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.department && (
                      <p className="text-sm text-red-600">
                        {errors.department}
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="position">Position *</Label>
                    <Select
                      value={formData.position}
                      onValueChange={(value) =>
                        handleInputChange("position", value)
                      }
                      disabled={!formData.department}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select position" />
                      </SelectTrigger>
                      <SelectContent>
                        {availablePositions.map((pos) => (
                          <SelectItem key={pos} value={pos}>
                            {pos}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    {errors.position && (
                      <p className="text-sm text-red-600">{errors.position}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="hireDate">Hire Date *</Label>
                    <Input
                      id="hireDate"
                      type="date"
                      value={formData.hireDate}
                      onChange={(e) =>
                        handleInputChange("hireDate", e.target.value)
                      }
                      //   error={!!errors.hireDate}
                    />
                    {errors.hireDate && (
                      <p className="text-sm text-red-600">{errors.hireDate}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="employmentType">Employment Type</Label>
                    <Select
                      value={formData.employmentType}
                      onValueChange={(value) =>
                        handleInputChange("employmentType", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="full-time">Full-time</SelectItem>
                        <SelectItem value="part-time">Part-time</SelectItem>
                        <SelectItem value="contract">Contract</SelectItem>
                        <SelectItem value="intern">Intern</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="workLocation">Work Location</Label>
                    <Select
                      value={formData.workLocation}
                      onValueChange={(value) =>
                        handleInputChange("workLocation", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="office">Office</SelectItem>
                        <SelectItem value="remote">Remote</SelectItem>
                        <SelectItem value="hybrid">Hybrid</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="reportingManager">Reporting Manager</Label>
                    <Input
                      id="reportingManager"
                      value={formData.reportingManager}
                      onChange={(e) =>
                        handleInputChange("reportingManager", e.target.value)
                      }
                      placeholder="Manager's name"
                    />
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Step 3: Compensation */}
            <TabsContent value="3" className="space-y-6 mt-6">
              <div>
                <h3 className="text-lg font-medium mb-4">
                  Compensation & Benefits
                </h3>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="salary">Base Salary *</Label>
                    <div className="flex space-x-2">
                      <Input
                        id="salary"
                        type="number"
                        value={formData.salary}
                        onChange={(e) =>
                          handleInputChange("salary", e.target.value)
                        }
                        placeholder="Enter salary amount"
                        className="flex-1"
                        // error={!!errors.salary}
                      />
                      <Select
                        value={formData.currency}
                        onValueChange={(value) =>
                          handleInputChange("currency", value)
                        }
                      >
                        <SelectTrigger className="w-20">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="KES">KES</SelectItem>
                          <SelectItem value="USD">USD</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    {errors.salary && (
                      <p className="text-sm text-red-600">{errors.salary}</p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="paymentFrequency">Payment Frequency</Label>
                    <Select
                      value={formData.paymentFrequency}
                      onValueChange={(value) =>
                        handleInputChange("paymentFrequency", value)
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="monthly">Monthly</SelectItem>
                        <SelectItem value="bi-weekly">Bi-weekly</SelectItem>
                        <SelectItem value="weekly">Weekly</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>Benefits Package</Label>
                  <div className="grid gap-2 md:grid-cols-3">
                    {[
                      "Health Insurance",
                      "Dental Coverage",
                      "Life Insurance",
                      "Retirement Plan",
                      "Gym Membership",
                      "Transport Allowance",
                    ].map((benefit) => (
                      <div
                        key={benefit}
                        className="flex items-center space-x-2"
                      >
                        <input
                          type="checkbox"
                          id={benefit}
                          checked={formData.benefits.includes(benefit)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              handleInputChange("benefits", [
                                ...formData.benefits,
                                benefit,
                              ]);
                            } else {
                              handleInputChange(
                                "benefits",
                                formData.benefits.filter((b) => b !== benefit)
                              );
                            }
                          }}
                          className="rounded border-gray-300"
                        />
                        <Label htmlFor={benefit} className="text-sm">
                          {benefit}
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Step 4: Review */}
            <TabsContent value="4" className="space-y-6 mt-6">
              <div>
                <h3 className="text-lg font-medium mb-4">Review & Submit</h3>

                <div className="space-y-6">
                  {/* Personal Info Summary */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">
                        Personal Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="grid gap-2 md:grid-cols-2">
                      <div>
                        <strong>Name:</strong> {formData.name}
                      </div>
                      <div>
                        <strong>Email:</strong> {formData.email}
                      </div>
                      <div>
                        <strong>Phone:</strong> {formData.phone}
                      </div>
                      {formData.dateOfBirth && (
                        <div>
                          <strong>Date of Birth:</strong> {formData.dateOfBirth}
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Employment Summary */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">
                        Employment Details
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="grid gap-2 md:grid-cols-2">
                      <div>
                        <strong>Department:</strong> {formData.department}
                      </div>
                      <div>
                        <strong>Position:</strong> {formData.position}
                      </div>
                      <div>
                        <strong>Hire Date:</strong> {formData.hireDate}
                      </div>
                      <div>
                        <strong>Employment Type:</strong>{" "}
                        {formData.employmentType}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Compensation Summary */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-base">Compensation</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid gap-2 md:grid-cols-2">
                        <div>
                          <strong>Base Salary:</strong> {formData.currency}{" "}
                          {parseFloat(formData.salary).toLocaleString()}
                        </div>
                        <div>
                          <strong>Payment Frequency:</strong>{" "}
                          {formData.paymentFrequency}
                        </div>
                      </div>
                      {formData.benefits.length > 0 && (
                        <div className="mt-4">
                          <strong>Benefits:</strong>
                          <div className="flex flex-wrap gap-1 mt-1">
                            {formData.benefits.map((benefit) => (
                              <Badge
                                key={benefit}
                                variant="secondary"
                                className="text-xs"
                              >
                                {benefit}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  <Alert>
                    <CheckCircle className="h-4 w-4" />
                    <AlertDescription>
                      Please review all information carefully. Once submitted, a
                      welcome email will be sent to the employee.
                    </AlertDescription>
                  </Alert>
                </div>
              </div>
            </TabsContent>
          </Tabs>

          {/* Navigation Buttons */}
          <div className="flex justify-between mt-8">
            <Button outline onClick={prevStep} disabled={currentStep === 1}>
              Previous
            </Button>

            {currentStep < totalSteps ? (
              <Button onClick={nextStep}>Next</Button>
            ) : (
              <Button onClick={handleSubmit} disabled={isLoading}>
                {isLoading ? "Adding Employee..." : "Complete Onboarding"}
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
